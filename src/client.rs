// Copyright 2023 rust-dns-sdk authors
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Import Tencent Cloud DNS implementation
pub(crate) use crate::providers::tencent::{TencentDns, TencentDnsBuilder};
pub(crate) use crate::providers::cloudflare::{CloudFlareDns, CloudFlareDnsBuilder};
use crate::utils::request::{DefaultDnsClient, DnsHttpClient};
use std::error::Error;
use async_trait::async_trait;

/// DNS Provider Selection Enum
/// 
/// Used to define supported DNS providers.
pub enum DnsProvider {
    /// Tencent Cloud DNS Service
    Tencent,
    /// CloudFlare Cloud DNS Service
    CloudFlare
    // Additional providers can be added here
}

/// DNS Client Implementation Wrapper
/// 
/// Used to encapsulate different provider's DNS client implementations.
pub enum DnsProviderImpl<T: DnsHttpClient> {
    /// Tencent Cloud Implementation
    Tencent(TencentDns<T>),
    CloudFlare(CloudFlareDns<T>)
}

impl DnsProviderImpl<DefaultDnsClient> {
    /// Create a builder for the specified provider
    /// 
    /// Returns a builder instance corresponding to the provider type.
    /// 
    /// # Parameters
    /// - `vendor`: DNS provider type
    /// 
    /// # Returns
    /// Returns a builder that implements the `DnsProviderBuilder` trait.
    pub fn new(provider: DnsProvider) -> Box<dyn DnsProviderBuilder<Output = Self>> {
        match provider {
            DnsProvider::Tencent => Box::new(TencentDnsBuilder::default()),
            DnsProvider::CloudFlare => Box::new(CloudFlareDnsBuilder::default()),
        }
    }
}

/// DNS Client Builder Trait
/// 
/// Defines methods for building DNS clients.
/// 
/// # Example
/// ```rust
/// builder.set_param("secret_id", "your_id")
///        .set_param("secret_key", "your_key");
/// ```

pub trait DnsProviderBuilder {
    /// The specific client type generated by the builder
    type Output: DnsClient;

    /// Set configuration parameters
    /// 
    /// # Parameters
    /// - `key`: Parameter key
    /// - `value`: Parameter value
    /// 
    /// # Returns
    /// Returns itself to support chaining.
    fn set_param(self: Box<Self>, key: &str, value: &str) -> Box<dyn DnsProviderBuilder<Output = Self::Output>>;

    /// Build the client
    /// 
    /// # Returns
    /// Returns the built client instance.
    fn build(self: Box<Self>) -> Self::Output;
}

/// DNS Client Trait
/// 
/// Defines basic operations for DNS clients.
#[async_trait]
pub trait DnsClient: Send + Sync {
    /// Get user details
    /// 
    /// # Returns
    /// Returns a string containing user details or an error.
    async fn describe_user_detail(&self) -> Result<String, Box<dyn Error>>;

    /// Get domain name list
    /// 
    /// # Returns
    /// Returns a string containing the domain name list or an error.
    async fn describe_domain_name_list(&self) -> Result<String, Box<dyn Error>>;

    /// Get record line list
    /// 
    /// # Parameters
    /// - `builder`: Record operation builder
    /// 
    /// # Returns
    /// Returns a string containing the record line list or an error.
    async fn describe_record_line_list(&self, builder: &RecordOperationBuilder) -> Result<String, Box<dyn Error>>;

    /// Get record list
    /// 
    /// # Parameters
    /// - `builder`: Record operation builder
    /// 
    /// # Returns
    /// Returns a string containing the record list or an error.
    async fn describe_record_list(&self, builder: &RecordOperationBuilder) -> Result<String, Box<dyn Error>>;

    /// Get subdomain list
    ///
    /// # Parameters
    /// - `builder`: SubDomain operation builder
    ///
    /// # Returns
    /// Returns a string containing the record list or an error.
    async fn describe_subdomain_record_list(&self, builder: &RecordOperationBuilder) -> Result<String, Box<dyn Error>>;

    /// Get record details
    /// 
    /// # Parameters
    /// - `builder`: Record operation builder
    /// 
    /// # Returns
    /// Returns a string containing the record details or an error.
    async fn describe_record(&self, builder: &RecordOperationBuilder) -> Result<String, Box<dyn Error>>;

    /// Create record
    /// 
    /// # Parameters
    /// - `builder`: Record operation builder
    /// 
    /// # Returns
    /// Returns a string containing the creation result or an error.
    async fn create_record(&self, builder: &RecordOperationBuilder) -> Result<String, Box<dyn Error>>;

    /// Modify record
    /// 
    /// # Parameters
    /// - `builder`: Record operation builder
    /// 
    /// # Returns
    /// Returns a string containing the modification result or an error.
    async fn modify_record(&self, builder: &RecordOperationBuilder) -> Result<String, Box<dyn Error>>;

    /// Delete record
    /// 
    /// # Parameters
    /// - `builder`: Record operation builder
    /// 
    /// # Returns
    /// Returns a string containing the deletion result or an error.
    async fn delete_record(&self, builder: &RecordOperationBuilder) -> Result<String, Box<dyn Error>>;
}

// Implement DnsClient trait
#[async_trait]
impl<T: DnsHttpClient> DnsClient for DnsProviderImpl<T> {
    async fn describe_user_detail(&self) -> Result<String, Box<dyn Error>> {
        match self {
            DnsProviderImpl::Tencent(t) => t.describe_user_detail().await,
            DnsProviderImpl::CloudFlare(c) => c.describe_user_detail().await,
            // Other providers...
        }
    }

    async fn describe_domain_name_list(&self) -> Result<String, Box<dyn Error>> {
        match self {
            DnsProviderImpl::Tencent(t) => t.describe_domain_name_list().await,
            DnsProviderImpl::CloudFlare(c) => c.describe_domain_name_list().await,
            // Other providers...
        }
    }

    async fn describe_record_line_list(&self, builder: &RecordOperationBuilder) -> Result<String, Box<dyn Error>> {
        match self {
            DnsProviderImpl::Tencent(t) => t.describe_record_line_list(builder).await,
            DnsProviderImpl::CloudFlare(c) => c.describe_record_line_list(builder).await,
            // Other providers...
        }
    }

    async fn describe_record_list(&self, builder: &RecordOperationBuilder) -> Result<String, Box<dyn Error>> {
        match self {
            DnsProviderImpl::Tencent(t) => t.describe_record_list(builder).await,
            DnsProviderImpl::CloudFlare(c) => c.describe_record_list(builder).await,
            // Other providers...
        }
    }

    async fn describe_subdomain_record_list(&self, builder: &RecordOperationBuilder) -> Result<String, Box<dyn Error>> {
        match self {
            DnsProviderImpl::Tencent(t) => t.describe_subdomain_record_list(builder).await,
            DnsProviderImpl::CloudFlare(c) => c.describe_subdomain_record_list(builder).await,
            // Other providers...
        }
    }

    async fn describe_record(&self, builder: &RecordOperationBuilder) -> Result<String, Box<dyn Error>> {
        match self {
            DnsProviderImpl::Tencent(t) => t.describe_record(builder).await,
            DnsProviderImpl::CloudFlare(c) => c.describe_record(builder).await,
            // Other providers...
        }
    }

    async fn create_record(&self, builder: &RecordOperationBuilder) -> Result<String, Box<dyn Error>> {
        match self {
            DnsProviderImpl::Tencent(t) => t.create_record(builder).await,
            DnsProviderImpl::CloudFlare(c) => c.create_record(builder).await,
            // Other providers...
        }
    }

    async fn modify_record(&self, builder: &RecordOperationBuilder) -> Result<String, Box<dyn Error>> {
        match self {
            DnsProviderImpl::Tencent(t) => t.modify_record(builder).await,
            DnsProviderImpl::CloudFlare(c) => c.modify_record(builder).await,
            // Other providers...
        }
    }

    async fn delete_record(&self, builder: &RecordOperationBuilder) -> Result<String, Box<dyn Error>> {
        match self {
            DnsProviderImpl::Tencent(t) => t.delete_record(builder).await,
            DnsProviderImpl::CloudFlare(c) => c.delete_record(builder).await,
            // Other providers...
        }
    }
}

/// Record Operation Builder
/// 
/// Used to build parameters for DNS record operations.
#[derive(Default)]
pub struct RecordOperationBuilder {
    pub(crate) domain: Option<String>,
    pub(crate) subdomain: Option<String>,
    pub(crate) record_type: Option<String>,
    pub(crate) record_line: Option<String>,
    pub(crate) ttl: Option<u32>,
    pub(crate) value: Option<String>,
    pub(crate) record_id: Option<String>,
    pub(crate) weight:  Option<u32>,
    pub(crate) domain_grade: Option<String>,
    pub(crate) proxied : Option<bool>,
}

impl RecordOperationBuilder {
    /// Create a new record operation builder
    /// 
    /// # Returns
    /// Returns a default-initialized builder instance.
    pub fn new() -> Self {
        Self::default()
    }

    /// Set domain
    /// 
    /// # Parameters
    /// - `domain`: Domain name
    /// 
    /// # Returns
    /// Returns itself to support chaining.
    pub fn domain(mut self, domain: &str) -> Self {
        self.domain = Some(domain.to_string());
        self
    }

    /// Set subdomain
    /// 
    /// # Parameters
    /// - `subdomain`: Subdomain
    /// 
    /// # Returns
    /// Returns itself to support chaining.
    pub fn subdomain(mut self, subdomain: &str) -> Self {
        self.subdomain = Some(subdomain.to_string());
        self
    }

    /// Set record type
    ///
    /// # Parameters
    /// - `record_type`: Record type
    ///
    /// # Returns
    /// Returns itself to support chaining.
    pub fn record_type(mut self, record_type: &str) -> Self {
        self.record_type = Some(record_type.to_string());
        self
    }

    /// Set Value address
    /// 
    /// # Parameters
    /// - `Value`: Value address
    /// 
    /// # Returns
    /// Returns itself to support chaining.
    pub fn value(mut self, value: &str) -> Self {
        self.value = Some(value.to_string());
        self
    }

    /// Set record line
    /// 
    /// # Parameters
    /// - `line`: Record line
    /// 
    /// # Returns
    /// Returns itself to support chaining.
    pub fn line(mut self, line: &str) -> Self {
        self.record_line = Some(line.to_string());
        self
    }

    /// Set TTL value
    /// 
    /// # Parameters
    /// - `ttl`: TTL value
    /// 
    /// # Returns
    /// Returns itself to support chaining.
    pub fn ttl(mut self, ttl: u32) -> Self {
        self.ttl = Some(ttl);
        self
    }

    /// Set weight
    /// 
    /// # Parameters
    /// - `weight`: Weight value
    /// 
    /// # Returns
    /// Returns itself to support chaining.
    pub fn weight(mut self, weight: u32) -> Self {
        self.weight = Some(weight);
        self
    }

    /// Set record ID
    /// 
    /// # Parameters
    /// - `id`: Record ID
    /// 
    /// # Returns
    /// Returns itself to support chaining.
    pub fn record_id(mut self, id: String) -> Self {
        self.record_id = Some(id);
        self
    }

    pub fn proxied(mut self, proxied: bool) -> Self {
        self.proxied = Some(proxied);
        self
    }
}